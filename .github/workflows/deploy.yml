name: Deploy Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version name'
        required: true
        default: 'minor'
        type: choice
        options:
          - major
          - minor
          - patch

jobs:
  update:
    name: Bump Version
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20.x
      - name: Setup Git
        shell: bash
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config -l
      - name: Install uv
        uses: astral-sh/setup-uv@v6
      - name: Install bump-my-version
        run: uv tool install bump-my-version
      - name: Make Bump
        id: bump
        shell: bash
        env:
          BUMPVERSION_TAG: true
          BUMPVERSION_COMMIT: true
        run: |
          echo "previous-version=$(bump-my-version show current_version)" >> $GITHUB_OUTPUT

          make bump-version/${{ github.event.inputs.version }}
          ([[ $? -gt 0 ]] && echo "bumped=false" || echo "bumped=true") >> $GITHUB_OUTPUT
          echo "current-version=$(bump-my-version show current_version)" >> $GITHUB_OUTPUT
          make release
      - name: Check Bump
        if: steps.bump.outputs.bumped == 'true'
        run: echo "Version was bumped from ${{ steps.bump.outputs.previous-version }} to ${{ steps.bump.outputs.current-version }}!"
      - name: Push Changes
        if: steps.bump.outputs.bumped == 'true'
        run: make release


  build:
    name: Build Releases
    needs: update
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    runs-on: ${{ matrix.os }}
    outputs:
      project_version: ${{ steps.get_project_version.outputs.project_version }}
      project_platform: ${{ steps.get_project_version.outputs.project_platform }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'

    - name: Install dependencies
      run:
        npm install

    - name: Get project version (using package.json)
      id: get_project_version
      run: |
        echo "project_version=$(node -p "require('./package.json').version")" >> "$GITHUB_OUTPUT"
        echo "project_version=$(node -p "require('./package.json').version")" >> $ENV:GITHUB_OUTPUT
        echo "project_platform=$(node -e 'console.log(process.platform)')" >> "$GITHUB_OUTPUT"
        echo "project_platform=$(node -e 'console.log(process.platform)')" >> $ENV:GITHUB_OUTPUT

    - if: matrix.os == 'ubuntu-latest'
      name: Build ${{ matrix.os }}
      run: npm run build:linux

    - if: matrix.os == 'windows-latest'
      name: Build ${{ matrix.os }}
      run: npm run build:windows

    - if: matrix.os == 'macos-latest'
      name: Build ${{ matrix.os }}
      run: npm run build:macos

    - name: Archive artifacts
      uses: actions/upload-artifact@v4
      with:
        name: release-artifacts-sunch-v${{ steps.get_project_version.outputs.project_version }}-${{ steps.get_project_version.outputs.project_platform }}
        retention-days: 5
        path: |
          ./release/${{ steps.get_project_version.outputs.project_version }}/latest.yml
          ./release/${{ steps.get_project_version.outputs.project_version }}/latest-*.yml
          ./release/${{ steps.get_project_version.outputs.project_version }}/*.exe
          ./release/${{ steps.get_project_version.outputs.project_version }}/*.dmg
          ./release/${{ steps.get_project_version.outputs.project_version }}/*.deb
        
  release:
    name: Publish Release
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: release-artifacts-sunch-v${{ needs.build.outputs.project_version }}-*
        merge-multiple: true
        path: ./releases
    
    - name: Generate Release Note
      run: |
        line_numbers=$(grep -n -m2 '^## v' CHANGELOG.md | cut -d: -f1 | paste -sd ',')
        sed -n "${line_numbers}p" CHANGELOG.md | head -n -1 > release_note.md
  
    # - name: Create Release
    #   id: create_release
    #   uses: actions/create-release@v1
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #   with:
    #     tag_name: v${{ needs.build.outputs.project_version }}
    #     release_name: Release v${{ needs.build.outputs.project_version }}
    #     draft: false
    #     prerelease: false

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        name: Release v${{ needs.build.outputs.project_version }}
        tag_name: v${{ needs.build.outputs.project_version }}
        body_path: release_note.md
        fail_on_unmatched_files: false
        files: |
          ./releases/latest.yml
          ./releases/latest-linux.yml
          ./releases/latest-mac.yml
          ./releases/${{ github.event.repository.name }}_${{ needs.build.outputs.project_version }}_amd64.deb
          ./releases/${{ github.event.repository.name }}_${{ needs.build.outputs.project_version }}_x64.exe
          ./releases/${{ github.event.repository.name }}_${{ needs.build.outputs.project_version }}_x64.dmg