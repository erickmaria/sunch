name: CI

on:
  push:
    branches: 
      - main
  pull_request:

jobs:
  # changelog:
  #   name: Changelog
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4
      
  #     - name: Fetch Remote Branches
  #       run: git fetch origin
      
  #     - name: Check for Changelog Changes
  #       if: github.event_name == 'pull_request'
  #       id: changelog
  #       run: |
  #         if git diff --name-only origin/${{ github.base_ref }} -- CHANGELOG.md; then
  #           echo "Changelog has been updated."
  #           exit 0
  #         else
  #           echo "Changelog needs to be updated."
  #           exit 1
  #         fi
  
  # lint:
  #   name: Lint
  #   runs-on: ubuntu-latest
  #   steps:
  #   - uses: actions/checkout@v4
  #   - uses: actions/setup-node@v4
  #     with:
  #       node-version: 20.x
  #   - run: npm install
  #   - name: Run Lint
  #     run: npm run lint

  # build:
  #   name: Build
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: actions/setup-node@v4
  #       with:
  #         node-version: 20.x
  #         cache: 'npm'
  #     - run: npm install
  #     - name: Run Build
  #       run: npm run build

  # coverage:
  #   name: Coverage
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: actions/setup-node@v4
  #       with:
  #         node-version: 20.x
  #     - run: npm install
  #     - name: Run Typecript Coverage
  #       run: npm run ts-coverage
  
  release:
    if: github.event_name == 'pull_request'
    name: Test Release
    # environment: manual_approval
    # needs:
    #   - lint
    #   - build
    #   - coverage
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    outputs:
      project_version: ${{ steps.get_project_version.outputs.project_version }}
      project_platform: ${{ steps.get_project_version.outputs.project_platform }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20.x

      - name: Install dependencies
        run:  npm install

      - if: matrix.os == 'windows-latest'
        name: Create Test Version ${{ matrix.os }}
        run: |
          $currentDate = Get-Date -Format "yyyyMMddfffffff"
          $version = npm pkg get version | ForEach-Object { $_.Replace('"', '') }
          $prNumber = ${{ github.event.pull_request.number  }}
          $newVersion = "${version}-pr-${prNumber}-${currentDate}"
          npm version $newVersion --no-git-tag-version

      - if: matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest'
        name: Create Test Version ${{ matrix.os }}
        run: |
          current_date=$(date +'%Y%m%d%s')
          version=$(npm pkg get version | xargs)
          newversion=${version}-pr-${{ github.event.pull_request.number  }}-${current_date}
          npm version ${newversion} --no-git-tag-version

      - name: Get project version (using package.json)
        id: get_project_version
        run: |
          echo "project_version=$(node -p "require('./package.json').version")" >> "$GITHUB_OUTPUT"
          echo "project_version=$(node -p "require('./package.json').version")" >> $ENV:GITHUB_OUTPUT
          echo "project_platform=$(node -e 'console.log(process.platform)')" >> "$GITHUB_OUTPUT"
          echo "project_platform=$(node -e 'console.log(process.platform)')" >> $ENV:GITHUB_OUTPUT


      - if: matrix.os == 'ubuntu-latest'
        name: Build Test Release ${{ matrix.os }}
        run: npm run build:linux

      - if: matrix.os == 'windows-latest'
        name: Build Test Release ${{ matrix.os }}
        run: npm run build:windows

      - if: matrix.os == 'macos-latest'
        name: Build Test Release ${{ matrix.os }}
        run: npm run build:macos

      - name:  Generate Test Release artifacts
        uses: actions/upload-artifact@v4
        id: gerenate_test_release_artifacts
        with:
          name: release-artifacts-sunch-v${{ steps.get_project_version.outputs.project_version }}-${{ steps.get_project_version.outputs.project_platform }}
          retention-days: 1
          path: |
            ./release/${{ steps.get_project_version.outputs.project_version }}/*.exe
            ./release/${{ steps.get_project_version.outputs.project_version }}/*.dmg
            ./release/${{ steps.get_project_version.outputs.project_version }}/*.deb

      - uses: cloudposse/github-action-matrix-outputs-write@v1
        id: out
        with:
          matrix-step-name: releases
          matrix-key: ${{ matrix.os }}
          outputs: |-
            artifact-url: ${{ steps.gerenate_test_release_artifacts.outputs.artifact-url }}
  read:
    runs-on: ubuntu-latest
    needs: 
      - release
    steps:
      - uses: cloudposse/github-action-matrix-outputs-read@v1
        id: read
        with:
          matrix-step-name: releases
    outputs:
      result: "${{ steps.read.outputs.result }}"
      # project_version: "${{ needs.release.outputs.project_version }}"

  
  publish:
    if: github.event_name == 'pull_request'
    name: Publish Releases on Comment PR
    runs-on: ubuntu-latest
    needs:
      - read
      - release
    steps:
    - name: List releases
      run: |
        echo "${{ toJson(needs.read.outputs) }}"
        echo "${{ toJson(needs.release.outputs) }}"
    - name: Comment PR
      uses: thollander/actions-comment-pull-request@v3
      with:
        message: |
          ## Release version: ${{ needs.release.outputs.project_version }}
          #### Releases:
            - windows: ${{ fromJson(needs.read.outputs.result).artifact-url.windows-latest }}
            - ubuntu: BBBBBBBBBBB
            - macos: CCCCCCCCCC