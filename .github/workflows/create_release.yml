name: Create Tag and Release

on:
  pull_request:
    types:
      - closed

jobs:
  build:
    if: startsWith(github.event.pull_request.title, 'Release:')
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    runs-on: ${{ matrix.os }}
    outputs:
      project_version: ${{ steps.get_project_version.outputs.project_version }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'

    - name: Install dependencies
      run:
        npm install

    - name: Get project version (using package.json)
      id: get_project_version
      run: |
        echo "project_version=$(node -p "require('./package.json').version")" >> "$GITHUB_OUTPUT"
        echo "project_version=$(node -p "require('./package.json').version")" >> $ENV:GITHUB_OUTPUT
        echo "project_platform=$(node -e 'console.log(process.platform)')" >> "$GITHUB_OUTPUT"
        echo "project_platform=$(node -e 'console.log(process.platform)')" >> $ENV:GITHUB_OUTPUT

    - if: matrix.os == 'ubuntu-latest'
      name: Build ${{ matrix.os }}
      run: npm run build:linux

    - if: matrix.os == 'windows-latest'
      name: Build ${{ matrix.os }}
      run: npm run build:windows

    - if: matrix.os == 'macos-latest'
      name: Build ${{ matrix.os }}
      run: npm run build:macos

    - name: Archive artifacts
      uses: actions/upload-artifact@v4
      with:
        name: release-artifacts-sunch-${{ steps.get_project_version.outputs.project_version }}-${{ steps.get_project_version.outputs.project_platform }}
        retention-days: 5
        path: |
          ./release/${{ steps.get_project_version.outputs.project_version }}/*.exe
          ./release/${{ steps.get_project_version.outputs.project_version }}/*.dmg
          ./release/${{ steps.get_project_version.outputs.project_version }}/*.deb
        
  release:
    if: startsWith(github.event.pull_request.title, 'Release:')
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts
        path: ./release
    
    - name: Generate Release Note
      run: |
        line_numbers=$(grep -n -m2 '^## v' CHANGELOG.md | cut -d: -f1 | paste -sd ',')
        sed -n "${line_numbers}p" CHANGELOG.md | head -n -1 > release_note.md
  
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ needs.build.outputs.project_version }}
        release_name: Release v${{ needs.build.outputs.project_version }}
        draft: false
        prerelease: false

    - name: Upload Release Asset 
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ needs.build.outputs.project_version }}
        body_path: release_note.md
        fail_on_unmatched_files: false
        files: |
          ./release/${{ github.event.repository.name }}_${{ needs.build.outputs.project_version }}_amd64.deb
          ./release/${{ github.event.repository.name }}_${{ needs.build.outputs.project_version }}_x64.exe
          ./release/${{ github.event.repository.name }}_${{ needs.build.outputs.project_version }}_x64.dmg